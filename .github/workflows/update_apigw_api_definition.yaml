name: Deploy to Lambda
on:
  workflow_call:
    inputs:
      project_code:
        required: true
        type: string
      aws_profile:
        required: true
        type: string
      terraform_path:
        required: true
        type: string
      account_id:
        default: ''
        required: false
        type: string
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
      gh_pull_repo_pat:
        required: true
env:
  PROJECT_CODE: ${{ inputs.project_code }}
  AWS_PROFILE: ${{ inputs.aws_profile }}
  TERRAFORM_PATH: ${{ inputs.terraform_path }}
  ACCOUNT_ID: ${{ inputs.account_id }}
permissions:
      id-token: write
      contents: write
jobs:
  job:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses:  aws-actions/configure-aws-credentials@v2
        if: ${{ env.ACCOUNT_ID == '' }}
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: eu-west-1

      - name: Configure AWS credentials via role assumption
        uses: aws-actions/configure-aws-credentials@v2
        if: ${{ env.ACCOUNT_ID != '' }}
        with:
          role-to-assume: "arn:aws:iam::${{ env.ACCOUNT_ID }}:role/gha_oidc_assume_role"
          role-session-name: GithubActions
          aws-region: eu-west-1

      - name: Update APIGW with terraform
        run: |
          echo "[INFO] Create AWS Profile"

          mkdir -vp $HOME/.aws
          
          echo -n "[${AWS_PROFILE}]
          region=eu-west-1
          output=text
          aws_access_key_id=$AWS_ACCESS_KEY_ID
          aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" > $HOME/.aws/credentials
          
          echo "[INFO] Execute Terraform"
          cd ${TERRAFORM_PATH}
          terraform init && \
          terraform apply -auto-approve \
          --target=aws_api_gateway_rest_api.${PROJECT_CODE} \
          --target=aws_api_gateway_deployment.${PROJECT_CODE} \
          --target=aws_api_gateway_integration.${PROJECT_CODE}

          echo "[INFO] Get APIGW ID"
          APIGW_ID=$(aws apigateway get-rest-apis --output json |
                     jq '.items[] | {id: .id, name: .name} |
                     select(.name == "'"${PROJECT_CODE}"'") | .id' -r)

          echo "[INFO] Create New APIGW Deployment"
          aws apigateway create-deployment \
              --rest-api-id ${APIGW_ID} \
              --stage-name 'default' \
              --stage-description 'Default Stage' \
              --description 'Deployed from Github Actions'
