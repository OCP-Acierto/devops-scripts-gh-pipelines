name: Upload to S3 CloudFront
on:
  workflow_call:
    inputs:
      image_tag:
        default: 'latest'
        required: true
        type: string
      aws_registry:
        default: ''
        required: true
        type: string
      project_code:
        required: true
        type: string
      container_path:
        default: ''
        required: true
        type: string
      aws_s3_cloudfront:
        default: ''
        required: true
        type: string
      account_id:
        default: ''
        required: false
        type: string
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: false
env:
  IMAGE_TAG: ${{ inputs.image_tag }}
  AWS_REGISTRY: ${{ inputs.aws_registry }}
  PROJECT_CODE: ${{ inputs.project_code }}
  CONTAINER_PATH: ${{ inputs.container_path }}
  AWS_S3_CLOUDFRONT: ${{ inputs.aws_s3_cloudfront }}
  ACCOUNT_ID: ${{ inputs.account_id }}
permissions:
      id-token: write
      contents: write
jobs:
  job:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses:  aws-actions/configure-aws-credentials@v2
        if: ${{ env.ACCOUNT_ID == '' }}
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: eu-west-1

      - name: Configure AWS credentials via role assumption
        uses: aws-actions/configure-aws-credentials@v2
        if: ${{ env.ACCOUNT_ID != '' }}
        with:
          role-to-assume: "arn:aws:iam::${{ env.ACCOUNT_ID }}:role/gha_oidc_assume_role"
          role-session-name: GithubActions
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v3

      - name: Push Static Files to S3 bucket & Invalidate CloudFront Cache
        run: |
          echo "[INFO] Create Docker Container ${AWS_REGISTRY}/${PROJECT_CODE}:${IMAGE_TAG}"
          CONTAINER_ID=$(docker create "${AWS_REGISTRY}/${PROJECT_CODE}:${IMAGE_TAG}")

          echo "[INFO] Copy contents from ${CONTAINER_ID}:${CONTAINER_PATH} to loca path 's3_cloudfront'"
          docker cp ${CONTAINER_ID}:${CONTAINER_PATH} s3_cloudfront

          echo "[INFO] Copy contents from ${CONTAINER_ID}:${CONTAINER_PATH} to S3 ${AWS_S3_CLOUDFRONT}"
          aws s3 cp s3_cloudfront ${AWS_S3_CLOUDFRONT} --recursive
