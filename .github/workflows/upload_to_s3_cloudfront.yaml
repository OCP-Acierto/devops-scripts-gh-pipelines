name: Upload to S3 CloudFront
on:
  workflow_call:
    inputs:
      image_tag:
        default: 'latest'
        required: false
        type: string
      aws_registry:
        default: ''
        required: false
        type: string
      aws_repository:
        required: false
        type: string
      container_path:
        default: ''
        required: false
        type: string
      aws_s3_cloudfront:
        default: ''
        required: false
        type: string
      cloudfront_id:
        default: ''
        required: true
        type: string
      cloudfront_invalidation:
        default: ''
        required: true
        type: string
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: false
env:
  IMAGE_TAG: ${{ inputs.image_tag }}
  AWS_REGISTRY: ${{ inputs.aws_registry }}
  AWS_REPOSITORY: ${{ inputs.aws_repository }}
  CONTAINER_PATH: ${{ inputs.container_path }}
  AWS_S3_CLOUDFRONT: ${{ inputs.aws_s3_cloudfront }}
  CLOUDFRONT_ID: ${{ inputs.cloudfront_id }}
  CLOUDFRONT_INVALIDATION: ${{ inputs.cloudfront_invalidation }}
jobs:
  job:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push Static Files to S3 bucket & Invalidate CloudFront Cache
        run: |
          if [ ! -z "${AWS_REPOSITORY}" ]; then
            echo "[INFO] Copy contents from image to S3 CloudFront"

            CONTAINER_ID=$(docker create "${AWS_REGISTRY}/${AWS_REPOSITORY}:${IMAGE_TAG}")
            docker cp ${CONTAINER_ID}:${CONTAINER_PATH} s3_cloudfront

            aws s3 cp s3_cloudfront ${AWS_S3_CLOUDFRONT} --recursive
          fi

          if [ ! -z "${CLOUDFRONT_INVALIDATION}" ]; then
            FLAG=4

            if [ $1 = "E33TR4EY9MXEI0" ]; then
              FLAG=$(kubectl rollout status deployment insurance-web-funnel-life 2>&1 | grep -i successfully | wc -l)
            fi
            
            if [ $FLAG = 1 ] || [ $FLAG = 4 ]; then
              echo "[INFO] Invalidating ${CLOUDFRONT_INVALIDATION} resources for ${CLOUDFRONT_ID}"
              aws cloudfront create-invalidation \
                --distribution-id ${CLOUDFRONT_ID} \
                --paths "${CLOUDFRONT_INVALIDATION}"

              aws cloudfront list-invalidations \
                --output json \
                --distribution-id ${CLOUDFRONT_ID} 
            else
              echo "DEPLOYMENT DIDN'T FINISHED YET. TRY AGAIN IN FEW MINUTES"
            fi
          fi
