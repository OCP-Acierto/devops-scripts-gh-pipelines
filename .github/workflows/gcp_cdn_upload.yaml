name: Upload to GCP CDN
on:
  workflow_call:
    inputs:
      image_tag:
        default: 'latest'
        required: true
        type: string
      gcp_registry:
        default: ''
        required: true
        type: string
      gcp_repository:
        required: true
        type: string
      gcp_cdn_path:
        default: ''
        required: true
        type: string
      gcp_cdn_project:
        default: ''
        required: true
        type: string
      project_path:
        default: ''
        required: true
        type: string
    secrets:
      gcp_cdm_registry_sa_credentials:
        required: true
      gcp_storage_sa_credentials:
        required: true
env:
  IMAGE_TAG: ${{ inputs.image_tag }}
  GCP_REGISTRY: ${{ inputs.gcp_registry }}
  GCP_REPOSITORY: ${{ inputs.gcp_repository }}
  GCP_CDN_PATH: ${{ inputs.gcp_cdn_path }}
  GCP_CDN_PROJECT: ${{ inputs.gcp_cdn_project }}
  PROJECT_PATH: ${{ inputs.project_path }}
jobs:
  job:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Configure GCP Credentials
        run: |
          # IMPORTANT: SECRET MUST BE IN BASE64
          touch gcp_cdm_registry_sa_credentials.json
          echo "${{ secrets.gcp_cdm_registry_sa_credentials }}" | base64 -d > gcp_cdm_registry_sa_credentials.json

          client_email=$(cat gcp_cdm_registry_sa_credentials.json | jq .client_email  -r)
          project_id=$(cat gcp_cdm_registry_sa_credentials.json | jq .project_id  -r)

          echo "[INFO] Get access to Gcloud ${project_id}"

          gcloud auth activate-service-account "${client_email}" \
            --key-file=gcp_cdm_registry_sa_credentials.json \
            --project="${project_id}"

          echo "[INFO] Use project $(gcloud config list --format=json | jq .core.project -r)"

          rm -Rf gcp_cdm_registry_sa_credentials.json

      - name: Configure Docker Credentials
        run: |
          gcloud auth configure-docker --quiet

      - name: Get Static Files From docker image
        run: |
          echo "[INFO] Create docker container for CDN from TAG '${IMAGE_TAG}'"
          CONTAINER_ID=$(docker create "${GCP_REGISTRY}/${GCP_REPOSITORY}:${IMAGE_TAG}")

          echo "[INFO] Copy contents from CDN image to project directory ./cdn/"
          docker cp ${CONTAINER_ID}:${PROJECT_PATH} cdn/

          echo "[INFO] Remove docker container for CDN"
          docker rm "${CONTAINER_ID}"

      - name: Configure GCP Credentials only for production-cdm
        uses: google-github-actions/auth@v2.1.7
        if: ${{ env.GCP_CDN_PROJECT == 'production-cdm' }}
        with:
          credentials_json: ${{ secrets.gcp_storage_sa_credentials }}

      - name: Set up Cloud SDK only for production-cdm
        uses: google-github-actions/setup-gcloud@v2.1.2
        if: ${{ env.GCP_CDN_PROJECT == 'production-cdm' }}
        with:
          project_id: production-cdm

      - name: Upload Static Files to GCP CDN
        run: |
          EXCLUDE=".*\.txt$|.*\.php$|.*\.config|.htaccess|$|/maquetacio|/sitemap"
          CACHE_CONTROL="Cache-Control:public,max-age=3600"

          echo "[INFO] Rsync cdn/ to ${GCP_CDN_PATH}"
          # -m option, perform a parallel (multi-threaded/multi-processing)
          # -q Causes gsutil to perform operations quietly
          gsutil -q -m -h "${CACHE_CONTROL}" \
          rsync -r -d -x "${EXCLUDE}" "cdn/" "${GCP_CDN_PATH}"

          echo "[INFO] CDN Stats"
          gsutil du -sch "${GCP_CDN_PATH}"
