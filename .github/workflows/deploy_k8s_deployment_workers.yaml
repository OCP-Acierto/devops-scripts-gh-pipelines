name: Deploy to K8s
on:
  workflow_call:
    inputs:
      project_code:
        required: true
        type: string
      image_tag:
        required: true
        type: string
      deploy_env:
        required: true
        type: string
      k8s_cluster_zone:
        default: europe-west1-b
        required: true
        type: string
      gcp_project:
        required: false
        type: string
      gke_cluster_name:
        required: true
        type: string
      workers_array:
        required: true
        type: string
    secrets:
      gcp_adm_k8s_sa_credentials:
        required: true
      gh_pull_repo_pat:
        required: true
env:
  PROJECT_CODE: ${{ inputs.project_code }}
  IMAGE_TAG: ${{ inputs.image_tag }}
  DEPLOY_ENV: ${{ inputs.deploy_env }}
  K8S_CLUSTER_ZONE: ${{ inputs.k8s_cluster_zone }}
  GCP_PROJECT: ${{ inputs.gcp_project }}
  GKE_CLUSTER_NAME: ${{ inputs.gke_cluster_name }}
  WORKERS_ARRAY: ${{ inputs.workers_array }}
jobs:
  job:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Checkout kubernetes repo
        uses: actions/checkout@v2
        with:
          repository: OCP-Acierto/devops-scripts-k8s
          token: ${{ secrets.GH_PULL_REPO_PAT }}
          path: k8s

      - name: Configure GCP Credentials
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.gcp_adm_k8s_sa_credentials }}

      - name: Configure GKE Credentials
        run: |
          gcloud container clusters get-credentials "${GKE_CLUSTER_NAME}" \
              --zone "${K8S_CLUSTER_ZONE}" --project "${GCP_PROJECT }"

      - name: Deploy to k8s
        run: |
          TIMEOUT=600s
          for worker in $(echo ${WORKERS_ARRAY} | jq -r .[].worker_name); do

            worker_name="${PROJECT_CODE}-${worker}"
            kubectl apply -f ./k8s/${DEPLOY_ENV}/projects/${worker_name}/autoscaling.yaml
            kubectl apply -f <( sed "s/__VERSION__/${IMAGE_TAG}/" ./k8s/${DEPLOY_ENV}/projects/${worker_name}/deployment.yaml)

            echo "[INFO] Start Rollout Deployment with a timeout of ${TIMEOUT}"
            kubectl rollout restart deployment ${worker_name}
            kubectl rollout status deployment ${worker_name} --timeout=${TIMEOUT}
            kubectl get pods | grep ${worker_name}            
          done
