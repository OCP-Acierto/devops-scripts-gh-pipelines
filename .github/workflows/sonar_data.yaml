name: Sonar Scanner
on:
  workflow_call:
    inputs:
      project_code:
        required: true
        type: string
      gcp_registry:
        default: 'eu.gcr.io/internal-cdm/images'
        required: true
        type: string
      gcp_repository:
        required: true
        type: string
      sonar_exclusions:
        default: ''
        required: false
        type: string
    secrets:
      gcp_cdm_registry_sa_credentials:
        required: true
      sonar_token:
        required: true
      sonar_url:
        required: true
      gh_npm_registry_pat:
        required: false
env:
  GCP_REGISTRY: ${{ inputs.gcp_registry }}
  GCP_REPOSITORY: ${{ inputs.gcp_repository }}
  SONAR_EXCLUSIONS: ${{ inputs.sonar_exclusions }}
  PROJECT_CODE: ${{ inputs.project_code }}
  SONAR_URL: ${{ secrets.sonar_url }}
  SONAR_TOKEN: ${{ secrets.sonar_token }}
jobs:
  job:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    env:
      GH_NPM_REGISTRY_PAT: "${{ secrets.gh_npm_registry_pat }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure GCP Credentials
        run: |
          # IMPORTANT: SECRET MUST BE IN BASE64
          touch gcp_cdm_registry_sa_credentials.json
          echo "${{ secrets.gcp_cdm_registry_sa_credentials }}" | base64 -d > gcp_cdm_registry_sa_credentials.json

          client_email=$(cat gcp_cdm_registry_sa_credentials.json | jq .client_email  -r)
          project_id=$(cat gcp_cdm_registry_sa_credentials.json | jq .project_id  -r)

          echo "[INFO] Get access to Gcloud ${project_id}"

          gcloud auth activate-service-account "${client_email}" \
            --key-file=gcp_cdm_registry_sa_credentials.json \
            --project="${project_id}"

          echo "[INFO] Use project $(gcloud config list --format=json | jq .core.project -r)"

          rm -Rf gcp_cdm_registry_sa_credentials.json

      - name: Configure Docker Credentials
        run: |
          gcloud auth configure-docker --quiet

      - name: Sonar Scanner Execution
        run: |
          docker run --rm --workdir "/app" \
              -v "$(pwd)/:/app/" \
              "${GCP_REGISTRY}/${GCP_REPOSITORY}:latest" \
              /bin/bash -e -c "/usr/bin/sonar-scanner \
                      -Dsonar.projectKey=${PROJECT_CODE} \
                      -Dsonar.sources=. \
                      -Dsonar.host.url=${SONAR_URL} \
                      -Dsonar.login=${SONAR_TOKEN} \
                      -Dsonar.sourceEncoding=UTF-8 \
                      -Dsonar.exclusions=public/**,${SONAR_EXCLUSIONS}
                  "
