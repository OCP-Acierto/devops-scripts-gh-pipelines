name: Build Docker Image
on:
  workflow_call:
    inputs:
      image_tag:
        default: 'latest'
        required: true
        type: string
      gcp_registry:
        default: 'eu.gcr.io/internal-cdm/builds'
        required: true
        type: string
      gcp_repository:
        required: true
        type: string
      docker_file:
        default: 'Dockerfile'
        required: true
        type: string
      docker_build_args:
        default: ''
        required: false
        type: string
    secrets:
      gcp_cdm_registry_sa_credentials:
        required: true
      gh_composer_pat:
        required: false
      gh_npm_registry_pat:
        required: false
env:
  IMAGE_TAG: ${{ inputs.image_tag }}
  GCP_REGISTRY: ${{ inputs.gcp_registry }}
  GCP_REPOSITORY: ${{ inputs.gcp_repository }}
  DOCKER_FILE: ${{ inputs.docker_file }}
  DOCKER_BUILD_ARGS: ${{ inputs.docker_build_args }}
jobs:
  job:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure GCP Credentials
        run: |
          # IMPORTANT: SECRET MUST BE IN BASE64
          touch gcp_cdm_registry_sa_credentials.json
          echo "${{ secrets.gcp_cdm_registry_sa_credentials }}" | base64 -d > gcp_cdm_registry_sa_credentials.json

          client_email=$(cat gcp_adm_k8s_sa_credentials.json | jq .client_email  -r)

          client_email=$(cat gcp_cdm_registry_sa_credentials.json | jq .client_email  -r)
          project_id=$(cat gcp_cdm_registry_sa_credentials.json | jq .project_id  -r)

          echo "[INFO] Get access to Gcloud ${project_id}"

          gcloud auth activate-service-account "${client_email}" \
            --key-file=gcp_cdm_registry_sa_credentials.json \
            --project="${project_id}"

          echo "[INFO] Use project $(gcloud config list --format=json | jq .core.project -r)"

      - name: Configure Docker Credentials
        run: |
          gcloud auth configure-docker --quiet

      - name: Build, tag, and push image to GCP GCR
        run: |
          echo "[INFO] Run Build with ARGS ${DOCKER_BUILD_ARGS}"
          docker build \
            --build-arg GH_NPM_REGISTRY_PAT="${{ secrets.gh_npm_registry_pat }}" \
            --build-arg GH_COMPOSER_PAT="${{ secrets.gh_composer_pat }}" \
            ${DOCKER_BUILD_ARGS} \
            --tag ${GCP_REGISTRY}/${GCP_REPOSITORY}:${IMAGE_TAG} \
            --tag ${GCP_REGISTRY}/${GCP_REPOSITORY}:latest \
            --file ${DOCKER_FILE} .

          docker push ${GCP_REGISTRY}/${GCP_REPOSITORY}:${IMAGE_TAG}
          docker push ${GCP_REGISTRY}/${GCP_REPOSITORY}:latest
