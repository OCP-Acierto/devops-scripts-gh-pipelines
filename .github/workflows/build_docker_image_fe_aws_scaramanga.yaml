name: Build Docker Image
on:
  workflow_call:
    inputs:
      image_tag:
        default: 'latest'
        required: true
        type: string
      aws_registry_prod:
        default: ''
        required: false
        type: string
      aws_registry_non_prod:
        default: ''
        required: false
        type: string
      aws_repository:
        required: true
        type: string
      docker_file:
        default: 'Dockerfile'
        required: true
        type: string
      docker_build_args:
        default: ''
        required: false
        type: string
      max_num_failed_tests:
        default: '1'
        required: true
        type: string
      min_percentage_coverage:
        default: '80'
        required: true
        type: string
      tests_vitest:
        default: 'false'
        required: false
        type: string
    secrets:
      aws_access_key_id_non_prod:
        required: false
      aws_secret_access_key_non_prod:
        required: false
      aws_access_key_id_prod:
        required: false
      aws_secret_access_key_prod:
        required: false
      gh_npm_registry_pat:
        required: false
env:
  IMAGE_TAG: ${{ inputs.image_tag }}
  AWS_REGISTRY_PROD: ${{ inputs.aws_registry_prod }}
  AWS_REGISTRY_NON_PROD: ${{ inputs.aws_registry_non_prod }}
  AWS_REPOSITORY: ${{ inputs.aws_repository }}
  DOCKER_FILE: ${{ inputs.docker_file }}
  DOCKER_BUILD_ARGS: ${{ inputs.docker_build_args }}
  MAX_NUM_FAILED_TESTS: ${{ inputs.max_num_failed_tests }}
  MIN_PERCENTAGE_COVERAGE: ${{ inputs.min_percentage_coverage }}
  TESTS_VITEST: ${{ inputs.tests_vitest }}
jobs:
  job:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Execute UnitTests for vitest
        env:
          GH_NPM_REGISTRY_PAT: "${{ secrets.gh_npm_registry_pat }}"
        if: ${{ env.TESTS_VITEST == 'true' }}
        run: |
          yarn --frozen-lockfile --no-progress
          
          node node_modules/vitest/vitest.mjs  run --coverage \
                     --reporter=json --outputFile=test.json | tee coverage.txt

          coverage=$(cat coverage.txt | grep 'All files' | awk -F'|' '{print $2}' | sed -r 's/\s+//g')

          num_failed_tests=$(cat test.json | jq .numFailedTests)

          if [ "${num_failed_tests}" -gt "${MAX_NUM_FAILED_TESTS}" ]; then
            echo "[ERROR] ${num_failed_tests} Tests Failed, there are only ${MAX_NUM_FAILED_TESTS} 
                  allow tests to fail, exit with errlvl 1"
            exit 1
          else
            echo "[INFO] Tests Passed successfully, continue"
          fi

          if  (( $(echo "$coverage > $MIN_PERCENTAGE_COVERAGE" | bc -l) )); then
            echo "[INFO] Coverage passed successfully with ${coverage}%, continue"
          else
            echo "[ERROR] Coverage ${coverage} is less than the minimum of ${MIN_PERCENTAGE_COVERAGE},
                  exit with errlvl 1"
            exit 1
          fi


      - name: Configure AWS Credentials PROD
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id_prod }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key_prod }}
          aws-region: eu-west-1
        if: ${{ env.AWS_REGISTRY_PROD != '' }}

      - name: Login to Amazon ECR PROD
        uses: aws-actions/amazon-ecr-login@v1
        if: ${{ env.AWS_REGISTRY_PROD != '' }}

      - name: Build & tag image to AWS ECR PROD
        run: |
          echo "[INFO] Adding AWS_REGISTRY=${AWS_REGISTRY_PROD}"
          docker build \
            ${DOCKER_BUILD_ARGS} \
            --build-arg GH_NPM_REGISTRY_PAT="${{ secrets.gh_npm_registry_pat }}" \
            --build-arg AWS_REGISTRY=${AWS_REGISTRY_PROD} \
            --tag ${AWS_REGISTRY_PROD}/${AWS_REPOSITORY}:${IMAGE_TAG} \
            --tag ${AWS_REGISTRY_PROD}/${AWS_REPOSITORY}:latest \
            --file ${DOCKER_FILE} .
        if: ${{ env.AWS_REGISTRY_PROD != '' }}

      - name: Push image to AWS ECR PROD
        run: |
            docker push ${AWS_REGISTRY_PROD}/${AWS_REPOSITORY}:${IMAGE_TAG}
            docker push ${AWS_REGISTRY_PROD}/${AWS_REPOSITORY}:latest
        if: ${{ env.AWS_REGISTRY_PROD != '' }}


      - name: Configure AWS Credentials NON-PROD
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id_non_prod }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key_non_prod }}
          aws-region: eu-west-1
        if: ${{ env.AWS_REGISTRY_NON_PROD != '' }}

      - name: Login to Amazon ECR NON-PROD
        uses: aws-actions/amazon-ecr-login@v1
        if: ${{ env.AWS_REGISTRY_NON_PROD != '' }}

      - name: Build & tag image to AWS ECR NON-PROD
        run: |
          echo "[INFO] Adding AWS_REGISTRY=${AWS_REGISTRY_NON_PROD}"
          docker build \
            ${DOCKER_BUILD_ARGS} \
            --build-arg GH_NPM_REGISTRY_PAT="${{ secrets.gh_npm_registry_pat }}" \
            --build-arg AWS_REGISTRY=${AWS_REGISTRY_NON_PROD} \
            --tag ${AWS_REGISTRY_NON_PROD}/${AWS_REPOSITORY}:${IMAGE_TAG} \
            --tag ${AWS_REGISTRY_NON_PROD}/${AWS_REPOSITORY}:latest \
            --file ${DOCKER_FILE} .
        if: ${{ env.AWS_REGISTRY_NON_PROD != '' }}

      - name: Push image to AWS ECR NON-PROD
        run: |
          echo "[INFO] Pushing to NON-PROD ${AWS_REGISTRY_NON_PROD}"
          docker push ${AWS_REGISTRY_NON_PROD}/${AWS_REPOSITORY}:${IMAGE_TAG}
          docker push ${AWS_REGISTRY_NON_PROD}/${AWS_REPOSITORY}:latest
        if: ${{ env.AWS_REGISTRY_NON_PROD != '' }}
