name: Sonar Scanner
on:
  workflow_call:
    inputs:
      image_tag:
        default: 'latest'
        required: false
        type: string
      project_code:
        required: true
        type: string
      gcp_registry:
        default: 'eu.gcr.io/internal-cdm/images'
        required: true
        type: string
      gcp_repository:
        required: true
        type: string
      docker_file:
        default: 'Dockerfile'
        required: true
        type: string
      docker_build_args:
        default: ''
        required: false
        type: string
      sonar_exclusions:
        default: ''
        required: false
        type: string
      sonar_coverage_exclusions:
        default: ''
        required: false
        type: string
      phpunit_gcp_registry:
        default: ''
        required: false
        type: string
      phpunit_gcp_repository:
        default: ''
        required: false
        type: string
      phpunit_redis:
        default: ''
        required: false
        type: string
      phpunit_mongodb:
        default: ''
        required: false
        type: string
      phpunit_rabbitmq:
        default: ''
        required: false
        type: string
      phpunit_mysql:
        default: ''
        required: false
        type: string
      phpunit_elasticsearch:
        default: ''
        required: false
        type: string
      phpunit_config_path:
        default: ''
        required: false
        type: string
      phpunit:
        required: false
        type: string
    secrets:
      gcp_cdm_registry_sa_credentials:
        required: true
      sonar_token:
        required: true
      sonar_url:
        required: true
      rabbitmq_user:
        required: false
      rabbitmq_pass:
        required: false
      mysql_user:
        required: false
      mysql_pass:
        required: false
      leabank_public_key:
        required: false
      leabank_private_key:
        required: false
      gh_pull_repo_pat:
        required: true
env:
  IMAGE_TAG: ${{ inputs.image_tag }}
  GCP_REGISTRY: ${{ inputs.gcp_registry }}
  GCP_REPOSITORY: ${{ inputs.gcp_repository }}
  PROJECT_CODE: ${{ inputs.project_code }}
  SONAR_URL: ${{ secrets.sonar_url }}
  SONAR_TOKEN: ${{ secrets.sonar_token }}
  SONAR_EXCLUSIONS: ${{ inputs.sonar_exclusions }}
  SONAR_COVERAGE_EXCLUSIONS: ${{ inputs.sonar_coverage_exclusions }}
  PHPUNIT: ${{ inputs.phpunit }}
  PHPUNIT_REDIS: ${{ inputs.phpunit_redis }}
  PHPUNIT_MONGODB: ${{ inputs.phpunit_mongodb }}
  PHPUNIT_RABBITMQ: ${{ inputs.phpunit_rabbitmq }}
  PHPUNIT_MYSQL: ${{ inputs.phpunit_mysql }}
  PHPUNIT_ELASTICSEARCH: ${{ inputs.phpunit_elasticsearch }}
  PHPUNIT_CONFIG_PATH: ${{ inputs.phpunit_config_path }}
  PHPUNIT_GCP_REGISTRY: ${{ inputs.phpunit_gcp_registry }}
  PHPUNIT_GCP_REPOSITORY: ${{ inputs.phpunit_gcp_repository }}
jobs:
  job:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout config-management repo
        uses: actions/checkout@v4
        with:
          repository: OCP-Acierto/shared-config-management
          token: ${{ secrets.gh_pull_repo_pat }}
          path: config-management

      - name: Configure GCP Credentials
        run: |
          set -e
          # IMPORTANT: SECRET MUST BE IN BASE64
          touch gcp_cdm_registry_sa_credentials.json
          echo "${{ secrets.gcp_cdm_registry_sa_credentials }}" | base64 -d > gcp_cdm_registry_sa_credentials.json

          client_email=$(cat gcp_cdm_registry_sa_credentials.json | jq .client_email  -r)
          project_id=$(cat gcp_cdm_registry_sa_credentials.json | jq .project_id  -r)

          echo "[INFO] Get access to Gcloud ${project_id}"

          gcloud auth activate-service-account "${client_email}" \
            --key-file=gcp_cdm_registry_sa_credentials.json \
            --project="${project_id}"

          echo "[INFO] Use project $(gcloud config list --format=json | jq .core.project -r)"

          rm -Rf gcp_cdm_registry_sa_credentials.json

      - name: Configure Docker Credentials
        run: |
          set -e
          gcloud auth configure-docker --quiet

      - name: PHPUnit Execution
        if: ${{ env.PHPUNIT == 'true' }}
        run: |
          set -e
          echo "[INFO] Create phpunit-test network"
          docker network create --driver bridge phpunit-test || echo "[INFO] Network already exists"

          if [ ! -z "${PHPUNIT_MONGODB}" ]; then
            echo "[INFO] Start mongodb container"
            docker run -tid --rm --name mongodb --network phpunit-test \
              -e MONGO_INITDB_ROOT_USERNAME=mongoadmin \
              -e MONGO_INITDB_ROOT_PASSWORD=secret  \
              ${PHPUNIT_MONGODB} || { echo "[ERROR] Failed to start MongoDB"; exit 1; }
          fi

          if [ ! -z "${PHPUNIT_REDIS}" ]; then
            echo "[INFO] Start redis container"
            docker run -tid --rm --name redis --network phpunit-test \
            ${PHPUNIT_REDIS} || { echo "[ERROR] Failed to start Redis"; exit 1; }
          fi

          if [ ! -z "${PHPUNIT_RABBITMQ}" ]; then
            echo "[INFO] Start rabbitmq container"
            docker run -tid --rm --name rabbitmq --network phpunit-test \
              -e RABBITMQ_DEFAULT_USER=${{ secrets.rabbitmq_user }} \
              -e RABBITMQ_DEFAULT_PASS=${{ secrets.rabbitmq_pass }} \
              ${PHPUNIT_RABBITMQ}
            echo "[INFO] Waiting for RabbitMQ to be ready..."
            timeout 30s bash -c 'until docker logs rabbitmq 2>&1 | grep -q "Server startup complete"; do sleep 1; done' || { 
              echo "[ERROR] RabbitMQ failed to start. Logs:"; 
              docker logs rabbitmq; 
              exit 1; 
            }
          fi

          if [ ! -z "${PHPUNIT_MYSQL}" ]; then
            echo "[INFO] Start mysql container"
            docker run -tid --rm --name mysql --network phpunit-test -e MYSQL_ROOT_PASSWORD=${{ secrets.mysql_pass }} \
            ${PHPUNIT_MYSQL} || { echo "[ERROR] Failed to start MySQL"; exit 1; }
          fi

          if [ ! -z "${PHPUNIT_ELASTICSEARCH}" ]; then
            echo "[INFO] Start elasticsearch container"
            docker run -tid --rm --name elasticsearch --network phpunit-test -e "discovery.type=single-node" \
            ${PHPUNIT_ELASTICSEARCH} || { echo "[ERROR] Failed to start Elasticsearch"; exit 1; }
          fi

          LEABANK_MOUNT_FILE=""
          LEABANK_PUBLIC_KEY='${{ secrets.leabank_public_key }}'
          LEABANK_PRIVATE_KEY='${{ secrets.leabank_private_key }}'

          if [ ! -z "${LEABANK_PUBLIC_KEY}" ]; then
            echo "${LEABANK_PRIVATE_KEY}" > leabank-key.pem
            echo "${LEABANK_PUBLIC_KEY}" > leabank-key-public.pem
            LEABANK_MOUNT_FILE="true"
            echo "[INFO] created leabank public & private pem files from secrets"
          else
            echo "[INFO] Skipping leabank pem files"
          fi

          echo "[INFO] Execute phpunit tests"
          PHP_VERSION=$(docker run --rm  --entrypoint php "${PHPUNIT_GCP_REGISTRY}/${PHPUNIT_GCP_REPOSITORY}:${IMAGE_TAG}" -v | awk '/^PHP/ {print $2}' | awk -F. '{print $1"."$2}')
          echo "[INFO] Detected PHP version: ${PHP_VERSION}"

          echo "[INFO] Starting PHPUnit container"
          docker run -tid --name phpunit-container --workdir /app --network phpunit-test \
              -v "$(pwd)/jreport:/opt/jreport" \
              -v "$(pwd)/clover:/opt/clover" \
              -v "$(pwd)/config-management:/config-management" \
              ${LEABANK_MOUNT_FILE:+ -v "$(pwd)/leabank-key-public.pem:/app/storage/certificates/leabank-key-public.pem" } \
              ${LEABANK_MOUNT_FILE:+ -v "$(pwd)/leabank-key.pem:/app/storage/certificates/leabank-key.pem" } \
              "${PHPUNIT_GCP_REGISTRY}/${PHPUNIT_GCP_REPOSITORY}:${IMAGE_TAG}" \
              tail -f /dev/null || { echo "[ERROR] Failed to start PHPUnit container"; exit 1; }

          echo "[INFO] Verifying PHPUnit container is running"
          timeout 30s bash -c 'until docker exec phpunit-container php -v > /dev/null 2>&1; do sleep 1; done' || { 
              echo "[ERROR] PHPUnit container failed to start"; 
              docker logs phpunit-container; 
              docker stop phpunit-container; 
              exit 1; 
          }

          echo '[DEBUG] Verifying network connectivity';
          curl -s https://google.com > /dev/null || { echo '[ERROR] No network connectivity'; exit 1; }

          echo "[INFO] Running PHPUnit tests"
          docker exec -t phpunit-container /bin/bash -e -c "
              echo '[DEBUG] Checking PHP version';
              php -v;

              echo '[DEBUG] Installing Composer';
              curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer || { echo '[ERROR] Failed to install Composer'; exit 1; }

              echo '[DEBUG] Checking composer installation';
              composer --version || { echo '[ERROR] Composer installation failed'; exit 1; }

              echo '[DEBUG] Removing old PHP source.list';
              rm -vf /etc/apt/sources.list.d/php.list;

              echo '[DEBUG] Adding new PHP source.list';
              mkdir -p /etc/apt/sources.list.d;
              curl -fsSL https://packages.sury.org/php/apt.gpg | gpg --dearmor -o /usr/share/keyrings/php-sury.gpg || { echo '[ERROR] Failed to download PHP GPG key'; exit 1; }
              echo 'deb [signed-by=/usr/share/keyrings/php-sury.gpg] https://packages.sury.org/php/ bullseye main' > /etc/apt/sources.list.d/php.list || { echo '[ERROR] Failed to add PHP source.list'; exit 1; }

              echo '[DEBUG] Running apt-get update with timeout';
              timeout 120s apt-get update --allow-releaseinfo-change || { echo '[ERROR] apt-get update failed'; exit 1; }

              echo '[DEBUG] Installing PHP testing tools';
              apt-get -qq install -y php${PHP_VERSION}-xdebug php${PHP_VERSION}-mongodb || { echo '[ERROR] Failed to install PHP testing tools'; exit 1; }

              echo '[DEBUG] Copying PHPUnit configuration';
              cat /config-management/${PHPUNIT_CONFIG_PATH} > /app/.env.testing || { echo '[ERROR] Failed to copy PHPUnit configuration'; exit 1; }

              echo '[DEBUG] Running PHPUnit';
              XDEBUG_MODE=coverage /app/vendor/bin/phpunit \
                  --configuration /app/phpunit.xml \
                  --log-junit /opt/jreport/jreport.xml \
                  --coverage-clover /opt/clover/clover.xml \
                  --coverage-text || { echo '[ERROR] PHPUnit tests failed'; exit 1; }
          " || { 
              echo "[ERROR] PHPUnit tests failed"; 
              docker logs phpunit-container; 
              docker stop phpunit-container; 
              exit 1; 
          }

          echo "[INFO] Stopping PHPUnit container"
          docker stop phpunit-container

      - name: Sonar Scanner Execution
        run: |
          set -e
          docker run --rm --workdir "/app" \
              -v "$(pwd)/:/app/" \
              -v "$(pwd)/jreport:/opt/jreport" \
              -v "$(pwd)/clover:/opt/clover" \
              -v "$(pwd)/coverage:/opt/coverage" \
              "${GCP_REGISTRY}/${GCP_REPOSITORY}:latest" \
              /bin/bash -e -c "ls && /usr/bin/sonar-scanner \
                      -Dsonar.projectKey=${PROJECT_CODE} \
                      -Dsonar.sources=. \
                      -Dsonar.host.url=${SONAR_URL} \
                      -Dsonar.login=${SONAR_TOKEN} \
                      -Dsonar.sourceEncoding=UTF-8 \
                      -Dsonar.coverage.exclusions=**/*spec.ts,**/**/*spec.ts,**/index.ts,**/*mock.ts,**/__mocks__/*,${SONAR_COVERAGE_EXCLUSIONS} \
                      -Dsonar.exclusions=public/**,${SONAR_EXCLUSIONS} \
                      -Dsonar.clover.reportPath=/opt/clover/clover.xml \
                      -Dsonar.php.coverage.reportPaths=/opt/clover/clover.xml \
                      -Dsonar.coverage.jacoco.xmlReportPaths=/opt/clover/clover.xml
                  "
