name: Deploy to K8s
on:
  workflow_call:
    inputs:
      image_tag:
        required: true
        type: string
      project_code:
        required: true
        type: string
      deploy_env:
        required: true
        type: string
      eks_cluster_name:
        required: true
        type: string
      eks_cluster_zone:
        default: eu-west-1
        required: true
        type: string
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
      gh_pull_repo_pat:
        required: true
      ingress_apikey:
        required: false
env:
  IMAGE_TAG: ${{ inputs.image_tag }}
  PROJECT_CODE: ${{ inputs.project_code }}
  DEPLOY_ENV: ${{ inputs.deploy_env }}
  EKS_CLUSTER_NAME: ${{ inputs.eks_cluster_name }}
  EKS_CLUSTER_ZONE: ${{ inputs.eks_cluster_zone }}
  KUBECTL_VERSION: v1.23.6
jobs:
  job:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Checkout kubernetes repo
        uses: actions/checkout@v2
        with:
          repository: OCP-Acierto/devops-scripts-k8s
          token: ${{ secrets.GH_PULL_REPO_PAT }}
          path: k8s

      - name: Install Kubectl ${{ env.KUBECTL_VERSION }}
        run: |
          sudo rm -fv  /usr/local/bin/kubectl
          curl -sLO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
          sudo chmod +x kubectl
          sudo mv -v kubectl /usr/local/bin/kubectl
          kubectl version --output json | jq '.clientVersion.gitVersion'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Configure EKS Credentials
        run: |
          aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME}
          kubectl version --output json | jq '.serverVersion.gitVersion'

      - name: Update Configmap
        run: |
          touch env_file
          for secret in $(aws secretsmanager list-secrets --output json | jq .SecretList[].Name -r | grep "${DEPLOY_ENV}/${PROJECT_CODE}"); do
            value=$(aws secretsmanager get-secret-value --secret-id "${secret}" --output json | jq .SecretString -r)

            IFS='/' read -r -a env_name <<< "$secret"
            echo "${env_name[2]^^}=${value}" >> env_file
          done

            kubectl create configmap "${PROJECT_CODE}-env" \
                --from-literal=env="$(cat env_file)" \
                -o yaml --dry-run=client \
            | kubectl apply -f -

      - name: Deploy to k8s
        run: |
          K8S_PATH="./k8s/scaramanga/${DEPLOY_ENV}/projects/${PROJECT_CODE}"
          TIMEOUT=600s

          kubectl apply -f "${K8S_PATH}/service.yaml"
          kubectl apply -f "${K8S_PATH}/autoscaling.yaml"

          if [ -f "${K8S_PATH}/ingress.yaml" ]; then
            kubectl apply -f <( sed "s/__INGRESS_APIKEY__/${{ secrets.INGRESS_APIKEY }}/" ${K8S_PATH}/ingress.yaml)
          fi

          STATUS=$(kubectl apply -f \
          <( sed "s/__VERSION__/${IMAGE_TAG}/" ${K8S_PATH}/deployment.yaml))

          if [ $(echo ${STATUS} | grep unchanged -c) -eq 1 ]; then
            echo "[INFO] Restart using rollout Deployment with a timeout of ${TIMEOUT}"
            kubectl rollout restart deployment ${PROJECT_CODE}
          else
            echo "[INFO] Deploying new version ${IMAGE_TAG} with a timeout of ${TIMEOUT}"
          fi

          kubectl rollout status deployment ${PROJECT_CODE} --timeout=${TIMEOUT}

