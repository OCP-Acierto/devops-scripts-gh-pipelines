name: Build Docker Image
on:
  workflow_call:
    inputs:
      image_tag:
        default: 'latest'
        required: true
        type: string
      aws_registry_prod:
        default: ''
        required: true
        type: string
      aws_registry_non_prod:
        default: ''
        required: true
        type: string
      aws_registry_stage:
        default: ''
        required: false
        type: string
      aws_repository:
        required: true
        type: string
      docker_file:
        default: 'Dockerfile'
        required: true
        type: string
      docker_build_args:
        default: ''
        required: false
        type: string
    secrets:
      aws_access_key_id_stage:
        required: true
      aws_secret_access_key_stage:
        required: false
      aws_access_key_id_non_prod:
        required: true
      aws_secret_access_key_non_prod:
        required: false
      aws_access_key_id_prod:
        required: true
      aws_secret_access_key_prod:
        required: false
      gh_npm_registry_pat:
        required: false
      ocp_packages_actions_role:
        required: false
env:
  IMAGE_TAG: ${{ inputs.image_tag }}
  AWS_REGISTRY_PROD: ${{ inputs.aws_registry_prod }}
  AWS_REGISTRY_NON_PROD: ${{ inputs.aws_registry_non_prod }}
  AWS_REGISTRY_STAGE: ${{ inputs.aws_registry_stage }}
  AWS_REPOSITORY: ${{ inputs.aws_repository }}
  DOCKER_FILE: ${{ inputs.docker_file }}
  DOCKER_BUILD_ARGS: ${{ inputs.docker_build_args }}
jobs:
  job:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials OCP-ARTIFACTS
        uses: aws-actions/configure-aws-credentials@v1
        env:
          TOKEN: ${{ secrets.ocp_packages_actions_role }}
        if: ${{ env.TOKEN != '' }}
        with:
          role-to-assume: ${{ secrets.ocp_packages_actions_role }}
          role-session-name: githubactions
          aws-region: eu-west-1

      - name: Authenticate to CodeArtifact
        env:
          TOKEN: ${{ secrets.ocp_packages_actions_role }}
        if: ${{ env.TOKEN != '' }}
        run: |
          export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain bauer-ocp-packages-domain --duration-seconds 0 --query authorizationToken --output text)
          echo "::add-mask::$CODEARTIFACT_AUTH_TOKEN"
          echo "CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN" >> $GITHUB_ENV

      - name: Configure AWS Credentials PROD
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id_prod }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key_prod }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR PROD
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & tag image to AWS ECR
        run: |
          docker build \
            ${DOCKER_BUILD_ARGS} \
            --build-arg GH_NPM_REGISTRY_PAT="${{ secrets.gh_npm_registry_pat }}" \
            --build-arg CODEARTIFACT_AUTH_TOKEN=${{ env.CODEARTIFACT_AUTH_TOKEN }} \
            --tag ${AWS_REGISTRY_PROD}/${AWS_REPOSITORY}:${IMAGE_TAG} \
            --tag ${AWS_REGISTRY_PROD}/${AWS_REPOSITORY}:latest \
            --tag ${AWS_REGISTRY_NON_PROD}/${AWS_REPOSITORY}:${IMAGE_TAG} \
            --tag ${AWS_REGISTRY_NON_PROD}/${AWS_REPOSITORY}:latest \
            --tag ${AWS_REGISTRY_STAGE}/${AWS_REPOSITORY}:${IMAGE_TAG} \
            --tag ${AWS_REGISTRY_STAGE}/${AWS_REPOSITORY}:latest \
            --file ${DOCKER_FILE} .

      - name: Push image to AWS ECR PROD
        run: |
          docker push ${AWS_REGISTRY_PROD}/${AWS_REPOSITORY}:${IMAGE_TAG}
          docker push ${AWS_REGISTRY_PROD}/${AWS_REPOSITORY}:latest

      - name: Configure AWS Credentials NON-PROD
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id_non_prod }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key_non_prod }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR NON-PROD
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push image to AWS ECR NON-PROD
        run: |
          docker push ${AWS_REGISTRY_NON_PROD}/${AWS_REPOSITORY}:${IMAGE_TAG}
          docker push ${AWS_REGISTRY_NON_PROD}/${AWS_REPOSITORY}:latest

      - name: Configure AWS Credentials STAGE
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id_stage }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key_stage }}
          aws-region: eu-west-1

      - name: Login to Amazon ECR STAGE
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push image to AWS ECR STAGE
        run: |
          docker push ${AWS_REGISTRY_STAGE}/${AWS_REPOSITORY}:${IMAGE_TAG}
          docker push ${AWS_REGISTRY_STAGE}/${AWS_REPOSITORY}:latest
