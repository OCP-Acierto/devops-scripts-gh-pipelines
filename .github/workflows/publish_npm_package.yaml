name: Publish NPM Package
on:
  workflow_call:
    inputs:
      image_tag:
        default: 'latest'
        required: true
        type: string
      aws_repository:
        required: true
        type: string
      docker_file:
        default: 'Dockerfile'
        required: true
        type: string
      have_submodules:
        default: false
        required: false
        type: string
      aws_region:
        default: ''
        required: true
        type: string
      account_id_prod:
        default: ''
        required: false
        type: string
      ocp_packages_actions_role:
        required: false
        type: string
    secrets:
      gh_npm_registry_pat:
        required: false
      gh_pull_repo_pat:
        required: false
      chromatic_project_token_ocp_component_essence_acierto:
        required: false
env:
  IMAGE_TAG: ${{ inputs.image_tag }}
  AWS_REPOSITORY: ${{ inputs.aws_repository }}
  DOCKER_FILE: ${{ inputs.docker_file }}
  HAVE_SUBMODULES: ${{ inputs.have_submodules }}
  AWS_REGION: ${{ inputs.aws_region }}
  ACCOUNT_ID_PROD: ${{ inputs.account_id_prod }}
  OCP_PACKAGES_ACTIONS_ROLE: ${{ inputs.ocp_packages_actions_role }}
permissions:
      id-token: write
      contents: write
jobs:
  job:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout
        if: ${{ env.HAVE_SUBMODULES == 'true' }}
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PULL_REPO_PAT }}
          submodules: recursive
          fetch-depth: 0

      - name: Checkout
        if: ${{ env.HAVE_SUBMODULES == 'false' }}
        uses: actions/checkout@v4

      - name: Configure AWS credentials OCP-ARTIFACTS
        uses: aws-actions/configure-aws-credentials@v4
        if: ${{ env.OCP_PACKAGES_ACTIONS_ROLE != '' }}
        with:
          role-to-assume: ${{ env.OCP_PACKAGES_ACTIONS_ROLE }}
          role-session-name: githubactions
          aws-region: eu-west-1

      - name: Authenticate to CodeArtifact
        if: ${{ env.OCP_PACKAGES_ACTIONS_ROLE != '' }}
        run: |
          export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain ocp-packages-domain --duration-seconds 0 --query authorizationToken --output text)
          echo "::add-mask::$CODEARTIFACT_AUTH_TOKEN"
          echo "CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN" >> $GITHUB_ENV

      - name: Configure AWS credentials via role assumption PROD
        uses: aws-actions/configure-aws-credentials@v4
        if: ${{ env.ACCOUNT_ID_PROD != '' }}
        with:
          role-to-assume: "arn:aws:iam::${{ env.ACCOUNT_ID_PROD }}:role/gha_oidc_assume_role"
          role-session-name: GithubActions
          aws-region: eu-west-1

      - name: Login to Amazon ECR PROD
        uses: aws-actions/amazon-ecr-login@v2
        if: ${{ env.ACCOUNT_ID_PROD != '' }}
      
      - name: Build & tag image to AWS ECR
        run: |
          CODEARTIFACT_AUTH_TOKEN="${{ env.CODEARTIFACT_AUTH_TOKEN }}"
          GH_NPM_REGISTRY_PAT="${{ secrets.gh_npm_registry_pat }}"
          CHROMATIC_PROJECT_TOKEN_OCP_COMPONENT_ESSENCE_ACIERTO="${{ secrets.chromatic_project_token_ocp_component_essence_acierto }}"
          
          echo "[INFO] Create registry variables"
          if [ -n "$ACCOUNT_ID_PROD" ]; then AWS_REGISTRY_PROD=$ACCOUNT_ID_PROD.dkr.ecr.${AWS_REGION}.amazonaws.com; fi

          echo "[INFO] Build docker images with conditional parameters"
          docker build \
            ${DOCKER_BUILD_ARGS:+ ${DOCKER_BUILD_ARGS} } \
            ${GH_NPM_REGISTRY_PAT:+     --build-arg "GH_NPM_REGISTRY_PAT=${GH_NPM_REGISTRY_PAT}" } \
            ${CODEARTIFACT_AUTH_TOKEN:+ --build-arg "CODEARTIFACT_AUTH_TOKEN=${CODEARTIFACT_AUTH_TOKEN}" } \
            ${AWS_REGISTRY_PROD:+       --tag "${AWS_REGISTRY_PROD}/${AWS_REPOSITORY}:latest" } \
            --file ${DOCKER_FILE} ${CONTEXT}.
